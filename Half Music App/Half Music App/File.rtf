{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red225\green226\blue231;\red31\green32\blue41;\red37\green144\blue141;
\red211\green35\blue46;\red215\green0\blue143;\red29\green169\blue162;\red20\green156\blue146;\red69\green187\blue62;
\red93\green216\blue255;\red65\green161\blue192;\red50\green207\blue114;}
{\*\expandedcolortbl;;\csgenericrgb\c88217\c88535\c90427;\csgenericrgb\c12157\c12549\c16078;\csgenericrgb\c14440\c56530\c55465;
\csgenericrgb\c82745\c13725\c18039;\csgenericrgb\c84398\c0\c55980;\csgenericrgb\c11560\c66089\c63506;\csgenericrgb\c7843\c61177\c57255;\csgenericrgb\c26985\c73392\c24249;
\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c19443\c81327\c44651;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3         \cf4 print\cf2 (\cf5 "SAVING AUDIO"\cf2 )\
        \cf6 let\cf2  track = \cf7 LocalStorage\cf2 .\cf7 shared\cf2 .\cf7 searchTracks\cf2 [\cf8 1\cf2 ]\
        \cf6 let\cf2  trackRef = \cf7 ref\cf2 .\cf7 child\cf2 (track.track.\cf7 name\cf2 )\
        trackRef.\cf4 setValue\cf2 (track.\cf7 convertInDictionary\cf2 ())\
        \cf4 print\cf2 (\cf5 "IMPORT AUDIO"\cf2 )\
        \cf7 ref\cf2 .getData \{ [\cf6 weak\cf2  \cf6 self\cf2 ] \cf7 error\cf2 , dataSnapshot \cf6 in\cf2 \
            \cf6 guard\cf2  \cf6 let\cf2  snapshot = dataSnapshot\
            \cf6 else\cf2  \{\
                \cf4 print\cf2 (\cf5 "error - \cf2 \\(\cf7 error\cf2 )\cf5 "\cf2 )\
                \cf6 return\cf2 \
            \}\
\cf9 //            var track = [TrackFB]()\cf2 \
            \cf6 for\cf2  item \cf6 in\cf2  snapshot.\cf4 children\cf2  \{\
                \cf6 guard\cf2  \cf6 let\cf2  snapshot = item \cf6 as\cf2 ? \cf7 DataSnapshot\cf2 ,\
                      \cf6 let\cf2  track = \cf7 TrackFB\cf2 (\cf7 snapshot\cf2 : snapshot) \cf6 else\cf2  \{ \cf6 continue\cf2  \}\
                \cf6 self\cf2 ?.\cf7 audiofff\cf2 .\cf4 append\cf2 (track)\
                \cf4 print\cf2 (track)\
            \}\
        \}\
        \
\cf9 //        ref.observe(.value) \{ [weak self] snapshot in\cf2 \
\cf9 //            var tasks = [Task]()\cf2 \
\cf9 //            for item in snapshot.children \{ // \uc0\u1074 \u1099 \u1090 \u1072 \u1089 \u1082 \u1080 \u1074 \u1072 \u1077 \u1084  \u1074 \u1089 \u1077  tasks\cf2 \
\cf9 //                guard let snapshot = item as? DataSnapshot,\cf2 \
\cf9 //                      let task = Task(snapshot: snapshot) else \{ continue \}\cf2 \
\cf9 //                tasks.append(task)\cf2 \
\cf9 //            \}\cf2 \
\cf9 //            self?.tasks = tasks\cf2 \
\cf9 //            self?.tableView.reloadData()\cf2 \
\cf9 //        \}\
\
//\cf2 \
\cf9 //  NowIsPlayingView.swift\cf2 \
\cf9 //  Half Music App\cf2 \
\cf9 //\cf2 \
\cf9 //  Created by Apple Macbook Pro 13 on 7.11.22.\cf2 \
\cf9 //\cf2 \
\
\
\
\
\
\cf6 import\cf2  UIKit\
\cf6 import\cf2  MediaPlayer\
\
\cf6 protocol\cf2  \cf10 \cb3 NowIsPlayingViewInterface\cf2 \cb3 : \cf4 AnyObject\cf2  \{\
    \cf6 func\cf2  \cf11 \cb3 setupAudio\cf2 \cb3 ()\
\}\
\
\cf6 final\cf2  \cf6 class\cf2  \cf10 \cb3 NowIsPlayingView\cf2 \cb3 : \cf4 UIView\cf2  \{\
    \
    \cf6 @IBOutlet\cf2  \cf6 var\cf2  \cf11 \cb3 ourView\cf2 \cb3 : \cf4 UIView\cf2 !\
    \cf6 @IBOutlet\cf2  \cf6 private\cf2  \cf6 weak\cf2  \cf6 var\cf2  \cf11 \cb3 audioTitleLabel\cf2 \cb3 : \cf4 UILabel\cf2 !\
    \cf6 @IBOutlet\cf2  \cf6 private\cf2  \cf6 weak\cf2  \cf6 var\cf2  \cf11 \cb3 animationImageView\cf2 \cb3 : \cf4 UIImageView\cf2 !\
    \cf6 @IBOutlet\cf2  \cf6 private\cf2  \cf6 weak\cf2  \cf6 var\cf2  \cf11 \cb3 playPauseButtonOutlet\cf2 \cb3 : \cf4 UIButton\cf2 !\
    \
    \cf9 // 
\f1\b \cf12 \cb3 MARK: - Properties
\f0\b0 \cf2 \cb3 \
    \cf6 private\cf2  \cf6 let\cf2  \cf11 \cb3 dataFetcherService\cf2 \cb3 : \cf7 DataFetcherServiceProtocol\cf2  = \cf7 DataFetcherService\cf2 ()\
    \cf6 private\cf2  \cf6 let\cf2  \cf11 \cb3 audioPlayerService\cf2 \cb3  = \cf7 AudioPlayerManager\cf2 .\cf7 shared\cf2 \
    \cf6 private\cf2  \cf6 let\cf2  \cf11 \cb3 animationService\cf2 \cb3  = \cf7 AnimationManager\cf2 .\cf7 shared\cf2 \
    \
    \cf6 var\cf2  \cf11 \cb3 presenter\cf2 \cb3 : \cf7 NowIsPlayingPresenterInterface\cf2 ?\
    \
    \cf9 // 
\f1\b \cf12 \cb3 MARK: Life Cycle
\f0\b0 \cf2 \cb3 \
    \cf6 override\cf2  \cf6 init\cf2 (\cf11 \cb3 frame\cf2 \cb3 : \cf4 CGRect\cf2 ) \{\
        \cf6 super\cf2 .\cf4 init\cf2 (\cf4 frame\cf2 : frame)\
        \cf7 viewInit\cf2 ()\
        \cf7 setupAudio\cf2 ()\
        \cf7 presenter\cf2 ?.\cf7 addObserver\cf2 ()\
    \}\
    \
    \cf6 required\cf2  \cf6 init\cf2 ?(\cf11 \cb3 coder\cf2 \cb3 : \cf4 NSCoder\cf2 ) \{\
        \cf6 super\cf2 .\cf4 init\cf2 (\cf4 coder\cf2 : coder)\
    \}\
    \
    \cf6 deinit\cf2  \{\
        \cf7 presenter\cf2 ?.\cf7 removeObserver\cf2 ()\
    \}\
    \
    \cf9 // 
\f1\b \cf12 \cb3 MARK: - IBActions
\f0\b0 \cf2 \cb3 \
    \
    \cf6 @IBAction\cf2  \cf6 private\cf2  \cf6 func\cf2  \cf11 \cb3 playPauseAction\cf2 \cb3 () \{\
        \cf7 playPause\cf2 ()\
    \}\
    \
    \cf6 @IBAction\cf2  \cf6 private\cf2  \cf6 func\cf2  \cf11 \cb3 forwardAction\cf2 \cb3 () \{\
        \cf7 presenter\cf2 ?.\cf7 nextTrack\cf2 ()\
    \}\
\}\
\
\cf6 extension\cf2  \cf10 \cb3 NowIsPlayingView\cf2 \cb3 : \cf7 NowIsPlayingViewInterface\cf2  \{\
    \cf6 func\cf2  \cf11 \cb3 setupAudio\cf2 \cb3 () \{\
        \cf6 guard\cf2  \cf6 let\cf2  audioIndex = \cf7 audioPlayerService\cf2 .\cf7 trackIndex\cf2  \cf6 else\cf2  \{\
            \cf4 print\cf2 (\cf5 "XIB INDEX ERROR"\cf2 )\
            \cf6 return\cf2 \
        \}\
        \cf7 playPauseButtonOutlet\cf2 .\cf4 isSelected\cf2  = \cf7 audioPlayerService\cf2 .\cf7 isPlaying\cf2 \
        \cf7 playPauseButtonOutlet\cf2 .\cf4 isSelected\cf2 \
        ? \cf7 animationImageView\cf2 .\cf4 startAnimating\cf2 ()\
        : \cf7 animationImageView\cf2 .\cf4 stopAnimating\cf2 ()\
        \
        \cf6 let\cf2  track = \cf7 LocalStorage\cf2 .\cf7 shared\cf2 .\cf7 currentAudioQueue\cf2 [audioIndex]\
        \cf6 guard\cf2  \cf6 let\cf2  artist = track.artist \cf6 else\cf2  \{\
            \cf6 return\cf2 \
        \}\
        \cf7 audioTitleLabel\cf2 .\cf4 text\cf2  = artist +  \cf5 " - "\cf2  + track.name\
    \}\
\}\
\
\cf6 private\cf2  \cf6 extension\cf2  \cf10 \cb3 NowIsPlayingView\cf2 \cb3  \{\
    \cf6 func\cf2  \cf11 \cb3 playPause\cf2 \cb3 () \{\
        \cf7 playPauseButtonOutlet\cf2 .\cf4 isSelected\cf2 .\cf4 toggle\cf2 ()\
        \cf7 audioPlayerService\cf2 .\cf7 isPlaying\cf2  = \cf7 playPauseButtonOutlet\cf2 .\cf4 isSelected\cf2 \
        \cf7 playPauseButtonOutlet\cf2 .\cf4 isSelected\cf2 \
        ? \cf7 audioPlayerService\cf2 .\cf7 play\cf2 ()\
        : \cf7 audioPlayerService\cf2 .\cf7 pause\cf2 ()\
    \}\
    \
    \cf6 func\cf2  \cf11 \cb3 setupUI\cf2 \cb3 () \{\
        \cf6 let\cf2  recognizer = \cf4 UITapGestureRecognizer\cf2 (\cf4 target\cf2 : \cf6 self\cf2 , \cf4 action\cf2 : \cf6 #selector\cf2 (\cf7 ourViewTapped\cf2 ))\
        \cf7 ourView\cf2 .\cf4 addGestureRecognizer\cf2 (recognizer)\
        \cf7 animationImageView\cf2 .\cf4 animationImages\cf2  = \cf7 animationService\cf2 .\cf7 getAnimationImages\cf2 ()\
        \cf7 animationImageView\cf2 .\cf4 animationDuration\cf2  = \cf8 0.4\cf2 \
        \cf7 playPauseButtonOutlet\cf2 .\cf4 setImage\cf2 (\cf4 UIImage\cf2 (\cf4 systemName\cf2 : \cf5 "pause.circle.fill"\cf2 ), \cf4 for\cf2 : .\cf4 selected\cf2 )\
        \cf7 playPauseButtonOutlet\cf2 .\cf4 setImage\cf2 (\cf4 UIImage\cf2 (\cf4 systemName\cf2 : \cf5 "play.circle.fill"\cf2 ), \cf4 for\cf2 : .\cf4 normal\cf2 )\
    \}\
    \
    \cf6 func\cf2  \cf11 \cb3 viewInit\cf2 \cb3 () \{\
        \cf6 let\cf2  xibView = \cf4 Bundle\cf2 .\cf4 main\cf2 .\cf4 loadNibNamed\cf2 (\cf5 "NowIsPlayingView"\cf2 , \cf4 owner\cf2 : \cf6 self\cf2 )![\cf8 0\cf2 ] \cf6 as\cf2 ! \cf4 UIView\cf2 \
        xibView.\cf4 frame\cf2  = \cf6 self\cf2 .\cf4 bounds\cf2 \
        \cf4 addSubview\cf2 (xibView)\
    \}\
    \
    \cf6 @objc\cf2  \cf6 func\cf2  \cf11 \cb3 ourViewTapped\cf2 \cb3 () \{\
        \cf7 presenter\cf2 ?.\cf7 didTriggerTapView\cf2 ()\
    \}\
\}\
\cf9 \
\
//MARKAAKAKAKA\
}