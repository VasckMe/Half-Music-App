{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red225\green226\blue231;\red31\green32\blue41;\red37\green144\blue141;
\red211\green35\blue46;\red215\green0\blue143;\red29\green169\blue162;\red20\green156\blue146;\red69\green187\blue62;
}
{\*\expandedcolortbl;;\csgenericrgb\c88217\c88535\c90427;\csgenericrgb\c12157\c12549\c16078;\csgenericrgb\c14440\c56530\c55465;
\csgenericrgb\c82745\c13725\c18039;\csgenericrgb\c84398\c0\c55980;\csgenericrgb\c11560\c66089\c63506;\csgenericrgb\c7843\c61177\c57255;\csgenericrgb\c26985\c73392\c24249;
}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3         \cf4 print\cf2 (\cf5 "SAVING AUDIO"\cf2 )\
        \cf6 let\cf2  track = \cf7 LocalStorage\cf2 .\cf7 shared\cf2 .\cf7 searchTracks\cf2 [\cf8 1\cf2 ]\
        \cf6 let\cf2  trackRef = \cf7 ref\cf2 .\cf7 child\cf2 (track.track.\cf7 name\cf2 )\
        trackRef.\cf4 setValue\cf2 (track.\cf7 convertInDictionary\cf2 ())\
        \cf4 print\cf2 (\cf5 "IMPORT AUDIO"\cf2 )\
        \cf7 ref\cf2 .getData \{ [\cf6 weak\cf2  \cf6 self\cf2 ] \cf7 error\cf2 , dataSnapshot \cf6 in\cf2 \
            \cf6 guard\cf2  \cf6 let\cf2  snapshot = dataSnapshot\
            \cf6 else\cf2  \{\
                \cf4 print\cf2 (\cf5 "error - \cf2 \\(\cf7 error\cf2 )\cf5 "\cf2 )\
                \cf6 return\cf2 \
            \}\
\cf9 //            var track = [TrackFB]()\cf2 \
            \cf6 for\cf2  item \cf6 in\cf2  snapshot.\cf4 children\cf2  \{\
                \cf6 guard\cf2  \cf6 let\cf2  snapshot = item \cf6 as\cf2 ? \cf7 DataSnapshot\cf2 ,\
                      \cf6 let\cf2  track = \cf7 TrackFB\cf2 (\cf7 snapshot\cf2 : snapshot) \cf6 else\cf2  \{ \cf6 continue\cf2  \}\
                \cf6 self\cf2 ?.\cf7 audiofff\cf2 .\cf4 append\cf2 (track)\
                \cf4 print\cf2 (track)\
            \}\
        \}\
        \
\cf9 //        ref.observe(.value) \{ [weak self] snapshot in\cf2 \
\cf9 //            var tasks = [Task]()\cf2 \
\cf9 //            for item in snapshot.children \{ // \uc0\u1074 \u1099 \u1090 \u1072 \u1089 \u1082 \u1080 \u1074 \u1072 \u1077 \u1084  \u1074 \u1089 \u1077  tasks\cf2 \
\cf9 //                guard let snapshot = item as? DataSnapshot,\cf2 \
\cf9 //                      let task = Task(snapshot: snapshot) else \{ continue \}\cf2 \
\cf9 //                tasks.append(task)\cf2 \
\cf9 //            \}\cf2 \
\cf9 //            self?.tasks = tasks\cf2 \
\cf9 //            self?.tableView.reloadData()\cf2 \
\cf9 //        \}}